// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// This file is autogenerated! Do not edit it directly. Instead, edit the companion .drawio
// file in draw.io and generate this file by running "ss.cli run -h" in the command line.

#ifndef MODESM_H
#define MODESM_H
#include <stdint.h>
#include <stdint.h>
#include <stdbool.h>
#include "Mode.h"
//#include "SDT.h"


typedef enum ModeSm_EventId
{
    ModeSm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    ModeSm_EventId_CALIBRATE_CW_PA = 1,
    ModeSm_EventId_CALIBRATE_EXIT = 2,
    ModeSm_EventId_CALIBRATE_FREQUENCY = 3,
    ModeSm_EventId_CALIBRATE_RX_IQ = 4,
    ModeSm_EventId_CALIBRATE_SSB_PA = 5,
    ModeSm_EventId_CALIBRATE_TX_IQ = 6,
    ModeSm_EventId_DAH_PRESSED = 7,
    ModeSm_EventId_DIT_PRESSED = 8,
    ModeSm_EventId_KEY_PRESSED = 9,
    ModeSm_EventId_KEY_RELEASED = 10,
    ModeSm_EventId_PTT_PRESSED = 11,
    ModeSm_EventId_PTT_RELEASED = 12,
    ModeSm_EventId_TO_CW_MODE = 13,
    ModeSm_EventId_TO_SSB_MODE = 14
} ModeSm_EventId;

enum
{
    ModeSm_EventIdCount = 15
};

typedef enum ModeSm_StateId
{
    ModeSm_StateId_ROOT = 0,
    ModeSm_StateId_CALIBRATION_STATES = 1,
    ModeSm_StateId_CALIBRATE_CW_PA = 2,
    ModeSm_StateId_CALIBRATE_FREQUENCY = 3,
    ModeSm_StateId_CALIBRATE_RX_IQ = 4,
    ModeSm_StateId_CALIBRATE_SSB_PA = 5,
    ModeSm_StateId_CALIBRATE_TX_IQ = 6,
    ModeSm_StateId_NORMAL_STATES = 7,
    ModeSm_StateId_CW_RECEIVE = 8,
    ModeSm_StateId_CW_TRANSMIT_DAH_MARK = 9,
    ModeSm_StateId_CW_TRANSMIT_DIT_MARK = 10,
    ModeSm_StateId_CW_TRANSMIT_KEYER_SPACE = 11,
    ModeSm_StateId_CW_TRANSMIT_KEYER_WAIT = 12,
    ModeSm_StateId_CW_TRANSMIT_MARK = 13,
    ModeSm_StateId_CW_TRANSMIT_SPACE = 14,
    ModeSm_StateId_SSB_RECEIVE = 15,
    ModeSm_StateId_SSB_TRANSMIT = 16
} ModeSm_StateId;

enum
{
    ModeSm_StateIdCount = 17
};


// Generated state machine
// forward declaration
typedef struct ModeSm ModeSm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct ModeSm_Vars
{
    uint16_t spaceCount_ms;
    uint16_t markCount_ms;
    uint16_t ditDuration_ms;
    uint16_t waitDuration_ms;
} ModeSm_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void ModeSm_ctor(ModeSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void ModeSm_start(ModeSm* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void ModeSm_dispatch_event(ModeSm* sm, ModeSm_EventId event_id);

// Thread safe.
char const * ModeSm_state_id_to_string(ModeSm_StateId id);

// Thread safe.
char const * ModeSm_event_id_to_string(ModeSm_EventId id);

// Generated state machine
struct ModeSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    ModeSm_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    ModeSm_Vars vars;
};

#endif // MODESM_H
