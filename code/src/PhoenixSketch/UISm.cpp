// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

#include "UISm.h"
#include <stdbool.h> // required for `consume_event` flag
#include <string.h> // for memset
    

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(UISm* sm, UISm_StateId desired_state);

static void ROOT_enter(UISm* sm);

static void CALIBRATION_enter(UISm* sm);

static void CALIBRATION_exit(UISm* sm);

static void CALIBRATION_home(UISm* sm);

static void HOME_enter(UISm* sm);

static void HOME_exit(UISm* sm);

static void HOME_menu(UISm* sm);

static void MAIN_MENU_enter(UISm* sm);

static void MAIN_MENU_exit(UISm* sm);

static void MAIN_MENU_home(UISm* sm);

static void MAIN_MENU_select(UISm* sm);

static void SECONDARY_MENU_enter(UISm* sm);

static void SECONDARY_MENU_exit(UISm* sm);

static void SECONDARY_MENU_cal(UISm* sm);

static void SECONDARY_MENU_home(UISm* sm);

static void SPLASH_enter(UISm* sm);

static void SPLASH_exit(UISm* sm);

static void SPLASH_do(UISm* sm);


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void UISm_ctor(UISm* sm)
{
    memset(sm, 0, sizeof(*sm));
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void UISm_start(UISm* sm)
{
    ROOT_enter(sm);
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(SPLASH)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `SPLASH`.
            SPLASH_enter(sm);
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void UISm_dispatch_event(UISm* sm, UISm_EventId event_id)
{
    switch (sm->state_id)
    {
        // STATE: UISm
        case UISm_StateId_ROOT:
            // No events handled by this state (or its ancestors).
            break;
        
        // STATE: CALIBRATION
        case UISm_StateId_CALIBRATION:
            switch (event_id)
            {
                case UISm_EventId_HOME: CALIBRATION_home(sm); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: HOME
        case UISm_StateId_HOME:
            switch (event_id)
            {
                case UISm_EventId_MENU: HOME_menu(sm); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: MAIN_MENU
        case UISm_StateId_MAIN_MENU:
            switch (event_id)
            {
                case UISm_EventId_HOME: MAIN_MENU_home(sm); break;
                case UISm_EventId_SELECT: MAIN_MENU_select(sm); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: SECONDARY_MENU
        case UISm_StateId_SECONDARY_MENU:
            switch (event_id)
            {
                case UISm_EventId_HOME: SECONDARY_MENU_home(sm); break;
                case UISm_EventId_CAL: SECONDARY_MENU_cal(sm); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
        
        // STATE: SPLASH
        case UISm_StateId_SPLASH:
            switch (event_id)
            {
                case UISm_EventId_DO: SPLASH_do(sm); break;
                
                default: break; // to avoid "unused enumeration value in switch" warning
            }
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
static void exit_up_to_state_handler(UISm* sm, UISm_StateId desired_state)
{
    while (sm->state_id != desired_state)
    {
        switch (sm->state_id)
        {
            case UISm_StateId_CALIBRATION: CALIBRATION_exit(sm); break;
            
            case UISm_StateId_HOME: HOME_exit(sm); break;
            
            case UISm_StateId_MAIN_MENU: MAIN_MENU_exit(sm); break;
            
            case UISm_StateId_SECONDARY_MENU: SECONDARY_MENU_exit(sm); break;
            
            case UISm_StateId_SPLASH: SPLASH_exit(sm); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

static void ROOT_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state CALIBRATION
////////////////////////////////////////////////////////////////////////////////

static void CALIBRATION_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_CALIBRATION;
    
    // CALIBRATION behavior
    // uml: enter / { clearScreen = true; }
    {
        // Step 1: execute action `clearScreen = true;`
        sm->vars.clearScreen = true;
    } // end of behavior for CALIBRATION
}

static void CALIBRATION_exit(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}

static void CALIBRATION_home(UISm* sm)
{
    // CALIBRATION behavior
    // uml: HOME TransitionTo(HOME)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        CALIBRATION_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `HOME`.
        HOME_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for CALIBRATION
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state HOME
////////////////////////////////////////////////////////////////////////////////

static void HOME_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_HOME;
    
    // HOME behavior
    // uml: enter / { clearScreen = true; }
    {
        // Step 1: execute action `clearScreen = true;`
        sm->vars.clearScreen = true;
    } // end of behavior for HOME
}

static void HOME_exit(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}

static void HOME_menu(UISm* sm)
{
    // HOME behavior
    // uml: MENU TransitionTo(MAIN_MENU)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        HOME_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `MAIN_MENU`.
        MAIN_MENU_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for HOME
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state MAIN_MENU
////////////////////////////////////////////////////////////////////////////////

static void MAIN_MENU_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_MAIN_MENU;
    
    // MAIN_MENU behavior
    // uml: enter / { clearScreen = true; }
    {
        // Step 1: execute action `clearScreen = true;`
        sm->vars.clearScreen = true;
    } // end of behavior for MAIN_MENU
}

static void MAIN_MENU_exit(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}

static void MAIN_MENU_home(UISm* sm)
{
    // MAIN_MENU behavior
    // uml: HOME TransitionTo(HOME)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        MAIN_MENU_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `HOME`.
        HOME_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for MAIN_MENU
    
    // No ancestor handles this event.
}

static void MAIN_MENU_select(UISm* sm)
{
    // MAIN_MENU behavior
    // uml: SELECT TransitionTo(SECONDARY_MENU)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        MAIN_MENU_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `SECONDARY_MENU`.
        SECONDARY_MENU_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for MAIN_MENU
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state SECONDARY_MENU
////////////////////////////////////////////////////////////////////////////////

static void SECONDARY_MENU_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_SECONDARY_MENU;
    
    // SECONDARY_MENU behavior
    // uml: enter / { clearScreen = true; }
    {
        // Step 1: execute action `clearScreen = true;`
        sm->vars.clearScreen = true;
    } // end of behavior for SECONDARY_MENU
}

static void SECONDARY_MENU_exit(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}

static void SECONDARY_MENU_cal(UISm* sm)
{
    // SECONDARY_MENU behavior
    // uml: CAL TransitionTo(CALIBRATION)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        SECONDARY_MENU_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `CALIBRATION`.
        CALIBRATION_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for SECONDARY_MENU
    
    // No ancestor handles this event.
}

static void SECONDARY_MENU_home(UISm* sm)
{
    // SECONDARY_MENU behavior
    // uml: HOME TransitionTo(HOME)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        SECONDARY_MENU_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `HOME`.
        HOME_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for SECONDARY_MENU
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state SPLASH
////////////////////////////////////////////////////////////////////////////////

static void SPLASH_enter(UISm* sm)
{
    sm->state_id = UISm_StateId_SPLASH;
    
    // SPLASH behavior
    // uml: enter / { splashCount_ms = 0; }
    {
        // Step 1: execute action `splashCount_ms = 0;`
        sm->vars.splashCount_ms = 0;
    } // end of behavior for SPLASH
}

static void SPLASH_exit(UISm* sm)
{
    sm->state_id = UISm_StateId_ROOT;
}

static void SPLASH_do(UISm* sm)
{
    // SPLASH behavior
    // uml: 1. do / { splashCount_ms++; }
    {
        // Step 1: execute action `splashCount_ms++;`
        sm->vars.splashCount_ms++;
    } // end of behavior for SPLASH
    
    // SPLASH behavior
    // uml: do [splashCount_ms >= splashDuration_ms] TransitionTo(HOME)
    if (sm->vars.splashCount_ms >= sm->vars.splashDuration_ms)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
        SPLASH_exit(sm);
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `HOME`.
        HOME_enter(sm);
        
        // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
        return;
    } // end of behavior for SPLASH
    
    // No ancestor handles this event.
}

// Thread safe.
char const * UISm_state_id_to_string(UISm_StateId id)
{
    switch (id)
    {
        case UISm_StateId_ROOT: return "ROOT";
        case UISm_StateId_CALIBRATION: return "CALIBRATION";
        case UISm_StateId_HOME: return "HOME";
        case UISm_StateId_MAIN_MENU: return "MAIN_MENU";
        case UISm_StateId_SECONDARY_MENU: return "SECONDARY_MENU";
        case UISm_StateId_SPLASH: return "SPLASH";
        default: return "?";
    }
}

// Thread safe.
char const * UISm_event_id_to_string(UISm_EventId id)
{
    switch (id)
    {
        case UISm_EventId_CAL: return "CAL";
        case UISm_EventId_DO: return "DO";
        case UISm_EventId_HOME: return "HOME";
        case UISm_EventId_MENU: return "MENU";
        case UISm_EventId_SELECT: return "SELECT";
        default: return "?";
    }
}
