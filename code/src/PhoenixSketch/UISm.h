// Autogenerated with StateSmith 0.17.5+6ec341a3c93edf598f2ca7c31f61af85857928de.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Whatever you put in this `FileTop` section will end up 
// being printed at the top of every generated code file.

#ifndef UISM_H
#define UISM_H
#include <stdint.h>
#include <stdint.h> // for count var
#include "UI.h"
#include "Mode.h"
//#include "SDT.h"


typedef enum UISm_EventId
{
    UISm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    UISm_EventId_MENU = 1,
    UISm_EventId_MENU_DEC = 2,
    UISm_EventId_MENU_INC = 3,
    UISm_EventId_SELECT = 4
} UISm_EventId;

enum
{
    UISm_EventIdCount = 5
};

typedef enum UISm_StateId
{
    UISm_StateId_ROOT = 0,
    UISm_StateId_CALIBRATE_DISPLAYS = 1,
    UISm_StateId_CALIBRATE_CW_PA_DISPLAY = 2,
    UISm_StateId_CALIBRATE_FREQUENCY_DISPLAY = 3,
    UISm_StateId_CALIBRATE_RX_IQ_DISPLAY = 4,
    UISm_StateId_CALIBRATE_SSB_PA_DISPLAY = 5,
    UISm_StateId_CALIBRATE_TX_IQ_DISPLAY = 6,
    UISm_StateId_CALIBRATE_MENU_DISPLAY = 7,
    UISm_StateId_CALIBRATE_CANCEL = 8,
    UISm_StateId_CALIBRATE_CW_PA = 9,
    UISm_StateId_CALIBRATE_FREQUENCY = 10,
    UISm_StateId_CALIBRATE_RX_IQ = 11,
    UISm_StateId_CALIBRATE_SSB_PA = 12,
    UISm_StateId_CALIBRATE_TX_IQ = 13,
    UISm_StateId_HOME = 14,
    UISm_StateId_MAIN_MENU_DISPLAY = 15,
    UISm_StateId_MAIN_MENU_AUDIO = 16,
    UISm_StateId_MAIN_MENU_CALIBRATE = 17,
    UISm_StateId_MAIN_MENU_CANCEL = 18,
    UISm_StateId_MAIN_MENU_CW = 19,
    UISm_StateId_MAIN_MENU_RF = 20,
    UISm_StateId_RF_MENU_DISPLAY = 21,
    UISm_StateId_RF_ADJUST_RX_GAIN = 22,
    UISm_StateId_RF_ADJUST_SCALE = 23,
    UISm_StateId_RF_ADJUST_TX_GAIN = 24,
    UISm_StateId_RF_CANCEL = 25,
    UISm_StateId_RF_SELECT_100WPA = 26,
    UISm_StateId_SHOW_VALUE = 27,
    UISm_StateId_SPLASH = 28
} UISm_StateId;

enum
{
    UISm_StateIdCount = 29
};


// Generated state machine
// forward declaration
typedef struct UISm UISm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct UISm_Vars
{
    uint16_t splashDuration_ms;
    uint16_t splashCount_ms;
    uint8_t mainMenuSelection;
    uint8_t mainMenuLength;
    uint8_t secondMenuSelection;
    uint8_t secondMenuLength;
    void *uiUp;
} UISm_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void UISm_ctor(UISm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void UISm_start(UISm* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void UISm_dispatch_event(UISm* sm, UISm_EventId event_id);

// Thread safe.
char const * UISm_state_id_to_string(UISm_StateId id);

// Thread safe.
char const * UISm_event_id_to_string(UISm_EventId id);

// Generated state machine
struct UISm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    UISm_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    UISm_Vars vars;
};

#endif // UISM_H
